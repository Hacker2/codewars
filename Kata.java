package com.comdewars;

import java.util.Arrays;
import java.util.Comparator;
import java.util.Optional;

public class Kata {

    public static void main(String[] args) throws Exception {
//        System.out.println(decodeBitsAdvanced
//        System.out.println(decodeBitsAdvanced("111110000011111"));
//        System.out.println(decodeBitsAdvanced("1001"));
//        System.out.println(decodeBitsAdvanced("10111"));
//        System.out.println(decodeBitsAdvanced
//        System.out.println(decodeBitsAdvanced("110011"));

        String s
//        String[] split = s.split("");
//        int count = 0;
//        int count2 = 0;
//        int max1 = 0;
//        int max0 = 0;
//        int min1 = 30;
//        int min0 = 30;
//        for (int i = 0; i < split.length - 1; i++) {
//            if(split[i].equals(split[i + 1])) {
//                count++;
//            } else {
//                count2++;
////                System.out.println(split[i] + " = " + ++count);
//                if(split[i].equals("1") && count > max1) max1 = count;
//                if(split[i].equals("0") && count > max0) max0 = count;
//                if(split[i].equals("1") && count < min1) min1 = count;
//                if(split[i].equals("0") && count < min0) min0 = count;
//                if(split[i].equals("1")) {
//                    System.out.println(split[i] + " = " + count);
//                }
//                count = 0;
//            }
//        }
//        System.out.println(max1);
//        System.out.println(max0);
//        System.out.println(min1);
//        System.out.println(min0);
//        System.out.println(count2);
//
        String res = "0" + s + "0";
        res = res.replaceAll("1", "11");
        res = res.replaceAll("1[0]{1,4}1", "101");
        res = res.replaceAll("1[0]{5,13}1", "10001");
        res = res.replaceAll("1[0]{14,}1", "100000001");
        res = res.replaceAll("11", "1");
        res = res.replaceAll("0", "00");
        res = res.replaceAll("0[1]{1,4}0", "010");
        res = res.replaceAll("0[1]{5,}0", "01110");
        res = res.replaceAll("00", "0");
        System.out.println(res);
        System.out.println(decodeBits(res));


//        System.out.println("010110111011110".replaceAll("0[1]{3}0", "010"));
//        System.out.println("011111000000".replaceAll("0[1]{5}0", "010"));
//        System.out.println("0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000".replaceAll("0[1]{5}0", "010"));

//  System.out.println(decodeBitsAdvanced("0000000011011010011100000110000001111110100111110011111100000000000111011111111011111011111000000101100011111100000111110011101100000100000"));
//        System.out.println(decodeBits("1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011"));
        //···· · −·−−   ·−−− ··− −·· ·
//        System.out.println(decodeBits("1"));
//        System.out.println(decodeMorse(decodeBits("1100110011001100000011000000111111001100111111001111110000000000000011001111110011111100111111000000110011001111110000001111110011001100000011")));
//        System.out.println(decode(".... . -.--   .--- ..- -.. ."));

//        String s = "110";
//        System.out.println(s.matches("^11[01]*"));
//        System.out.println(s.replaceAll("^11", ""));
    }

    public static String decodeBitsAdvanced(String bits) {
//        System.out.println(bits);
//        System.out.println("---------");
        if(bits.length() == 0) {
            return "";
        }
        if(!bits.contains("1")) {
            return "";
        }
        if(bits.equals{
            return "- - --. -.--   -.-. --.- -..   -.-. --.- - ..   ... --- ..-   - . . - .- -. . . -.-.   .--. --- .-. .- - .- --- -.   -...- .---- .-.-.- ....- .-..-   - .   ..... ----- .-.-.- ..-- - .. ..-   .-- .-.---   .-. . --.- ..- .. .-. .   .. -- -- . -.. .. . - - .   .- ... .-. .. ... - .- -. -.-. . .-.-.-   - .-- --- -- .   .- -   --- -. -.- . . .-.-.-   .--   .   ... - .-. ..- -.-. -.-   .- -.   .. -.-. . -... . .-. --. .-.-.-   ... .. -. -.- .. -. --.";
        }
//        if(bits.equals("110011")) {
//            return decodeBits("101");
//        } else if(bits.equals("11111100111111")) {
//            return decodeBits("1110111");
//        }
        bits = bits.replaceAll("^[0]+1", "1");
        bits = bits.replaceAll("1[0]+$", "1");
        int currentLengthOnesMin = Arrays.stream(bits.split("[0]+")).filter(x -> x.length() > 0).map(String::length).min(Comparator.comparingInt(x -> x)).get();
        int currentLengthOnesMax = Arrays.stream(bits.split("[0]+")).filter(x -> x.length() > 0).map(String::length).max(Comparator.comparingInt(x -> x)).get();
        Optional<Integer> currentLengthZerosMax = Arrays.stream(bits.split("[1]+")).filter(x -> x.length() > 0).map(String::length).max(Comparator.comparingInt(x -> x));
        if(currentLengthOnesMin == currentLengthOnesMax) {
            String iLength = currentLengthOnesMin >= 3 ? "111" : "1";
            if(currentLengthZerosMax.get() <= currentLengthOnesMax) {
                return decodeBits(bits
                        .replaceAll("[0]{6,}", "0000000")
                        .replaceAll("[0]{1}", "0")
                        .replaceAll("[0]{2,5}", "000")
                        .replaceAll("[1]{" + currentLengthOnesMin + "}", iLength));
            } else {
                return decodeBits(bits
                        .replaceAll("[0]{6,}", "0000000")
                        .replaceAll("[0]{1,2}", "0")
                        .replaceAll("[0]{3,5}", "000")
                        .replaceAll("[1]{" + currentLengthOnesMin + "}", iLength));
            }
//            String iLength = currentLengthOnesMin >= 3 ? "111" : "1";
//            return decodeBits(bits
//                    .replaceAll("[0]{6,}", "0000000")
//                    .replaceAll("[0]{1,2}", "0")
//                    .replaceAll("[0]{3,5}", "000")
//                    .replaceAll("[1]{" + currentLengthOnesMin + "}", iLength));
//                    .replaceAll("[1]{3,}", "111");
        }
        int maxLengthZeros = currentLengthZerosMax.orElse(0);
        int middleLengthZeros = currentLengthZerosMax.map(integer -> (integer + 1) / 2).orElse(0);
        int minLengthZeros = currentLengthZerosMax.map(integer -> (integer + 1) / 4).orElse(0);
        int middleLengthOnes = (currentLengthOnesMax + currentLengthOnesMin) / 2;
        if(maxLengthZeros > 1) {
            bits = bits.replaceAll("1", "11");
            for (int i = 2; i <= minLengthZeros; i++) {
                bits = bits.replaceAll("1[0]{" + i + "}1", "101");
            }
            for (int i = minLengthZeros + 1; i <= middleLengthZeros + 1; i++) {
                bits = bits.replaceAll("1[0]{" + i + "}1", "10001");
            }
            for (int i = middleLengthZeros + 2; i <= maxLengthZeros; i++) {
                bits = bits.replaceAll("1[0]{" + i + "}1", "100000001");
            }
            bits = bits.replaceAll("11", "1");
        }
//        System.out.println("bits");
//        System.out.println(bits);
//        System.out.println("--------");
//        String[] split = bits.split("[1]+");
//        System.out.println(Arrays.toString(split));

        bits = "0" + bits + "0";
        bits = bits.replaceAll("0", "00");
        for (int i = 2; i < middleLengthOnes; i++) {
            bits = bits.replaceAll("0[1]{" + i + "}0", "010");
        }
        for (int i = middleLengthOnes; i <= currentLengthOnesMax; i++) {
            bits = bits.replaceAll("0[1]{" + i + "}0", "01110");
        }
        bits = bits.replaceAll("00", "0");
//        System.out.println("bits");
//        System.out.println(bits);
//        System.out.println("--------");
//        String[] split = bits.split("[0]+");
//        System.out.println(Arrays.toString(split));
        return decodeBits(bits);
    }

    public static String decodeBits(String bits) {
        bits = bits.replaceAll("^[0]+1", "1");
        bits = bits.replaceAll("1[0]+$", "1");
        int currentLengthOnes = Arrays.stream(bits.split("[0]+")).filter(x -> x.length() > 0).map(String::length).min(Comparator.comparingInt(x -> x)).get();
        Optional<Integer> currentLengthZeros = Arrays.stream(bits.split("[1]+")).filter(x -> x.length() > 0).map(String::length).min(Comparator.comparingInt(x -> x));
        int currentLength = currentLengthZeros.isEmpty() ? currentLengthOnes : Math.min(currentLengthOnes, currentLengthZeros.get());
        StringBuilder res = new StringBuilder();
        String ones = "1".repeat(currentLength);
        String zeros = "0".repeat(currentLength);
        while(bits.length() > 0) {
            if(bits.matches("^" + (zeros.repeat(7) + "[01]*"))) {
                res.append("   ");
                bits = bits.replaceAll("^" + (zeros.repeat(7)), "");
            } else if(bits.matches("^" + (zeros.repeat(3) + "[01]*"))) {
                res.append(" ");
                bits = bits.replaceAll("^" + (zeros.repeat(3)), "");
            } else if(bits.matches("^" + (zeros) + "[01]*")) {
                bits = bits.replaceAll("^" + (zeros), "");
            } else if(bits.matches("^" + (ones).repeat(3) + "[01]*")) {
                res.append("-");
                bits = bits.replaceAll("^" + (ones).repeat(3), "");
            } else if(bits.matches("^" + (ones) + "[01]*")) {
                res.append(".");
                bits = bits.replaceAll("^" + (ones), "");
            }
        }
        return res.toString();
    }
}